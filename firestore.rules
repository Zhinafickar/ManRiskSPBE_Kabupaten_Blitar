rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check for admin roles
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'superadmin'];
    }

    // --- Users Collection ---
    // Allow anyone to create a user document (for registration).
    // Allow authenticated users to list all users (for OPD page).
    // Allow users to get/update their own document.
    // Allow admins to get/update any user document.
    match /users/{userId} {
      allow list: if request.auth != null;
      allow get, update: if request.auth.uid == userId || isAdmin();
      allow create: if request.auth.uid == userId;
      // Admins should manage deletion through backend functions if needed, to ensure cleanup.
      allow delete: if isAdmin();
    }

    // --- Roles Collection ---
    // Used to lock a role to a user upon registration.
    // Allow anyone to create a role document (for registration).
    // Allow admins to read/delete role locks.
    match /roles/{role} {
      allow read, delete: if isAdmin();
      allow create: if request.auth != null;
    }
    
    // --- Surveys Collection ---
    // Allow authenticated users to create surveys.
    // Allow users to read/update/delete their own surveys.
    // Allow admins to read/delete any survey.
    match /surveys/{surveyId} {
      allow create: if request.auth.uid == request.resource.data.userId;
      allow read, update, delete: if request.auth.uid == resource.data.userId || isAdmin();
    }
    
    // --- Continuity Plans Collection ---
    // Allow authenticated users to create plans.
    // Allow users to read/update/delete their own plans.
    // Allow admins to read/delete any plan.
    match /continuityPlans/{planId} {
       allow create: if request.auth.uid == request.resource.data.userId;
       allow read, update, delete: if request.auth.uid == resource.data.userId || isAdmin();
    }
    
    // --- Admin Tokens Collection ---
    // Allow anyone to read the tokens for verification before login.
    // Allow admins (specifically superadmins) to manage tokens.
    match /adminTokens/{tokenId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }
  }
}
