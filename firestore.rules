
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for superadmin role
    function isSuperAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
    }

    // Allow anyone to verify tokens, which is a read operation.
    // This is required for the admin login/register guard page.
    match /adminTokens/{token} {
      allow get, list: if true;
      allow write, delete: if isSuperAdmin();
    }

    // Users can read their own profile, and any authenticated user can create one.
    match /users/{userId} {
      allow get: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;
      // Only superadmins can update/delete any user
      allow update, delete: if isSuperAdmin();
    }

    // Roles collection is used to "lock" a role to a user upon registration.
    // Allow any authenticated user to create a role lock for themselves.
    // Allow superadmins to delete role locks (which happens when a user is deleted).
    match /roles/{role} {
      allow create: if request.auth != null;
      allow get: if request.auth != null;
      allow delete: if isSuperAdmin();
    }

    // Users can manage their own surveys. Superadmins can manage all surveys.
    match /surveys/{surveyId} {
      allow read, write, delete: if request.auth != null && (request.auth.uid == resource.data.userId || isSuperAdmin());
      allow create: if request.auth != null;
    }
    
    // Users can manage their own continuity plans. Superadmins can manage all plans.
    match /continuityPlans/{planId} {
        allow read, write, delete: if request.auth != null && (request.auth.uid == resource.data.userId || isSuperAdmin());
        allow create: if request.auth != null;
    }
  }
}
